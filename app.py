from fastapi import FastAPI, UploadFile, File
from donut_infer import extract_text_from_image, load_model
from utils import pdf_to_images
from typing import List
from PIL import Image
import io

app = FastAPI()

@app.on_event("startup")
def preload_model():
    print("üì¶ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Donut...")
    load_model()
    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–º—è—Ç—å.")

@app.post("/extract-headings")
async def extract_headings(file: UploadFile = File(...)):
    print("–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª:", file.filename)
    content = await file.read()
    print("–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:", len(content))
    images: List[Image.Image] = []

    if file.filename.lower().endswith(".pdf"):
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF...")
        images = pdf_to_images(content)
    else:
        print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏...")
        image = Image.open(io.BytesIO(content))
        images = [image]

    results = []
    for i, img in enumerate(images):
        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}")
        text = extract_text_from_image(img)
        results.append({
            "page": i + 1,
            "headings_raw": text
        })
        print(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

    print("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    print("–†–µ–∑—É–ª—å—Ç–∞—Ç (—Å—ã—Ä–æ–µ):", repr(results))

    return {"results": results}